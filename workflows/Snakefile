"""Workflow to process historical samples of V-Pipe nucleotide alignment to
    SILO ready ndjson.zst files.
"""

import yaml

# Load configuration
with open("config.yaml", "r") as file:
    config = yaml.safe_load(file)

BASE_SAMPLE_DIR = config["BASE_SAMPLE_DIR"]
SAMPLE_BATCH_IDS = config["SAMPLE_BATCH_IDS"]
TIMELINE_FILE = config["TIMELINE_FILE"]
PRIMERS_FILE = config["PRIMERS_FILE"]
NUC_REFERENCE = config["NUC_REFERENCE"]
RESULTS_DIR = config["RESULTS_DIR"]


rule all:
    input:
        expand(
            "{results_dir}/{sample_id}_{batch_id}.ndjson",
            results_dir=RESULTS_DIR,
            sample_id=[s[0] for s in SAMPLE_BATCH_IDS],
            batch_id=[s[1] for s in SAMPLE_BATCH_IDS],
        ),


def get_sample_fps(sample_id, batch_id):
    """Construct the input sample directory based on the sample_id and batch_id."""
    return f"{BASE_SAMPLE_DIR}/{sample_id}_{batch_id}/alignments/REF_aln_trim.bam"


rule process_sample:
    """Processes the sample to ndjson, skip upload to loculus."""
    input:
        sample_fp=lambda wildcards: get_sample_fps(
            wildcards.sample_id, wildcards.batch_id
        ),
    output:
        result_fp="{RESULTS_DIR}/{sample_id}_{batch_id}.ndjson",
    params:
        sample_id=lambda wildcards: wildcards.sample_id,
        batch_id=lambda wildcards: wildcards.batch_id,
        result_dir=lambda wildcards: f"{RESULTS_DIR}/{wildcards.sample_id}_{wildcards.batch_id}",
        timeline_file=TIMELINE_FILE,
        primers_file=PRIMERS_FILE,
        nuc_reference=NUC_REFERENCE,
        aa_reference=NUC_REFERENCE,  # Adding the nuc ref, here for placeholder same as nuc_reference
        database_config="scripts/database_config.yaml",
    shell:
        """
        python scripts/vp_transformer.py \
            --input_file {input.sample_fp}/REF_aln_trim.bam \
            --sample_id {params.sample_id} \
            --batch_id {params.batch_id} \
            --result_dir {params.result_dir} \
            --timeline_file {params.timeline_file} \
            --primer_file {params.primers_file} \
            --reference {params.nuc_reference} \
            --database_config {params.database_config}
        """
