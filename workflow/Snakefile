"""Workflow to process historical samples of V-Pipe nucleotide alignment to
    SILO ready ndjson.zst files.
"""

import yaml
import os
from pathlib import Path


# CONFIG="workflow/config.yaml"
CONFIG = "workflow/config_euler.yaml"


configfile: CONFIG


# Load configuration
with open(CONFIG, "r") as file:
    config = yaml.safe_load(file)


def get_batch_id(sample_id):
    """Get the batch ids from the sample batch ids."""
    return config["SAMPLE_BATCH_IDS"][sample_id]


rule all:
    input:
        [
            f"{config['RESULTS_DIR']}/sampleId-{sample_id}_batchId-{get_batch_id(sample_id)}.ndjson.zst"
            for sample_id in config["SAMPLE_BATCH_IDS"].keys()
        ],


rule process_sample:
    """Processes the sample to ndjson, skip upload to loculus."""
    input:
        sample_fp=f"{config['BASE_SAMPLE_DIR']}"
        + "/{sample_id}/{batch_id}/alignments/REF_aln_trim.bam",
    output:
        result_fp=f"{config['RESULTS_DIR']}"
        + "/sampleId-{sample_id}_batchId-{batch_id}.ndjson.zst",
    params:
        sample_id=lambda wildcards: wildcards.sample_id,
        batch_id=lambda wildcards: wildcards.batch_id,
        timeline_file=config["TIMELINE_FILE"],
        primers_file=config["PRIMERS_FILE"],
        nuc_reference=config["NUC_REFERENCE"],
        aa_reference=config["NUC_REFERENCE"],
    log:
        "logs/sr2silo/process_sample/sampleId_{sample_id}_batchId_{batch_id}.log",  # Clearer wildcard separation
    shell:
        """
        sr2silo import-to-loculus \
            --input-file {input.sample_fp} \
            --sample-id {params.sample_id} \
            --batch-id {params.batch_id} \
            --timeline-file {params.timeline_file} \
            --primer-file {params.primers_file} \
            --output-fp {output.result_fp} \
            --reference {params.nuc_reference} \
            --no-upload 2>&1 | tee -a {log}
        """
