"""Workflow to process historical samples of V-Pipe nucleotide alignment to
    SILO ready ndjson.zst files.
"""

import yaml
import os
from pathlib import Path


CONFIG = "workflow/config.yaml"
# CONFIG = "workflow/config_euler.yaml"


configfile: CONFIG


# Load configuration
with open(CONFIG, "r") as file:
    config = yaml.safe_load(file)


def get_batch_id(sample_id):
    """Get the batch ids from the sample batch ids."""
    return config["SAMPLE_BATCH_IDS"][sample_id]


rule all:
    input:
        [
            f"{config['RESULTS_DIR']}/sampleId-{sample_id}_batchId-{get_batch_id(sample_id)}.ndjson.zst"
            for sample_id in config["SAMPLE_BATCH_IDS"].keys()
        ],


rule process_sample:
    """Processes the sample to ndjson, skip upload to loculus.

    This rule demonstrates the flexible parameter approach:
    - Parameters can be provided via CLI arguments (as shown)
    - Or via environment variables (TIMELINE_FILE, PRIMER_FILE, NEXTCLADE_REFERENCE)
    - CLI arguments take precedence over environment variables
    """
    input:
        sample_fp=f"{config['BASE_SAMPLE_DIR']}"
        + "/{sample_id}/{batch_id}/alignments/REF_aln_trim.bam",
    output:
        result_fp=f"{config['RESULTS_DIR']}"
        + "/sampleId-{sample_id}_batchId-{batch_id}.ndjson.zst",
    params:
        sample_id=lambda wildcards: wildcards.sample_id,
        batch_id=lambda wildcards: wildcards.batch_id,
        timeline_file=config["TIMELINE_FILE"],
        primers_file=config["PRIMERS_FILE"],
        nuc_reference=config["NUC_REFERENCE"],
        aa_reference=config["NUC_REFERENCE"],
    log:
        "logs/sr2silo/process_sample/sampleId_{sample_id}_batchId_{batch_id}.log",  # Clearer wildcard separation
    conda:
        "envs/sr2silo.yaml"
    shell:
        """
        sr2silo process-from-vpipe \
            --input-file {input.sample_fp} \
            --sample-id {params.sample_id} \
            --batch-id {params.batch_id} \
            --timeline-file {params.timeline_file} \
            --primer-file {params.primers_file} \
            --output-fp {output.result_fp} \
            --reference {params.nuc_reference} > {log} 2>&1
        """


rule submit_to_loculus:
    """Submits the processed sample to loculus.

    This rule now uses CLI parameters with environment variable fallbacks.
    The sr2silo command will automatically use environment variables
    if CLI parameters are not provided.

    Required configuration (via config file or environment variables):
        - KEYCLOAK_TOKEN_URL
        - SUBMISSION_URL

    CLI parameters take precedence over environment variables.
    """
    input:
        result_fp=f"{config['RESULTS_DIR']}"
        + "/sampleId-{sample_id}_batchId-{batch_id}.ndjson.zst",
    output:
        flag=f"{config['RESULTS_DIR']}/uploads/sampleId-{{sample_id}}_batchId-{{batch_id}}.uploaded",
    params:
        sample_id=lambda wildcards: wildcards.sample_id,
        keycloak_url=config.get("KEYCLOAK_TOKEN_URL", ""),
        submission_url=config.get("SUBMISSION_URL", ""),
    log:
        "logs/sr2silo/submit_to_loculus/sampleId_{sample_id}_batchId_{batch_id}.log",
    conda:
        "envs/sr2silo.yaml"
    shell:
        """
        sr2silo submit-to-loculus \
            --processed-file {input.result_fp} \
            --sample-id {params.sample_id} \
            --keycloak-token-url "{params.keycloak_url}" \
            --submission-url "{params.submission_url}" > {log} 2>&1 && \
        mkdir -p $(dirname {output.flag}) && \
        touch {output.flag}
        """
