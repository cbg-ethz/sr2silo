# This pipeline checks whether the package
# installs properly, passes unit tests and whether
# the code formatting is right.
name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.12.6"]
        poetry-version: ["1.8.3"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yml
          activate-environment: myenv

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          version: ${{ matrix.poetry-version }}

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            ~/.conda/envs/myenv
          key: ${{ runner.os }}-poetry-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.poetry-version }}-


      - uses: actions/checkout@v3
      - name: Run black formatting check
        uses: psf/black@stable


      - name: Install the dependencies
        run: poetry install --no-interaction --no-root --with dev
        if: steps.cache-deps.outputs.cache-hit != 'true'
      - name: Install the module
        run: poetry install --with dev --no-interaction
      - name: Run unit tests
        run: poetry run pytest
      - name: Run Ruff
        run: poetry run ruff check .
      - name: Run interrogate
        run: poetry run interrogate src
      - name: Run Pyright (type checking)
        run: poetry run pyright
